{"ast":null,"code":"var _jsxFileName = \"/Users/jamie/visorplus/frontend/src/components/pages/Profile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"../../App.css\";\nimport \"../Profile.css\";\nimport Card from \"../Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Profile() {\n  _s();\n  const [bio, setBio] = useState(\"\"); // State to store the bio value\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [interest1, setInterest1] = useState(\"\");\n  const [interest2, setInterest2] = useState(\"\");\n  const [interest3, setInterest3] = useState(\"\");\n  useEffect(() => {\n    // Fetch the bio value when the component mounts\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/bio/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch bio. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setBio(data.bioAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching bio:\", error.message);\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/firstname/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch firstname. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setFirstName(data.firstNameAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching firstName:\", error.message);\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/lastname/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch lastname. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setLastName(data.lastNameAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching lastName:\", error.message);\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/interest1/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch interest1. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest1(data.interest1Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest1:\", error.message);\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/interest2/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch interest2. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest2(data.interest2Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest2:\", error.message);\n      }\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/interest3/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch interest3. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest3(data.interest3Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest3:\", error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  const cardData = {\n    type: \"Student\",\n    profilePicture: \"../../../images/profile-icon.jpg\",\n    name: firstName + lastName,\n    researchInterests: \"Machine Learning\",\n    educationLevel: \"Ph.D.\",\n    school: \"McGill Univeristy\",\n    fieldOfStudy: \"Computer Science\",\n    bio: bio\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"profile\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"profile\",\n      children: \"PROFILE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      ...cardData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n_s(Profile, \"itU47QRF7J2gOwk1aPKme4gHzNU=\");\n_c = Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","Profile","_s","bio","setBio","firstName","setFirstName","lastName","setLastName","interest1","setInterest1","interest2","setInterest2","interest3","setInterest3","fetchData","response","fetch","ok","Error","status","data","json","bioAdvisees","error","console","message","firstNameAdvisees","lastNameAdvisees","interest1Advisees","interest2Advisees","interest3Advisees","cardData","type","profilePicture","name","researchInterests","educationLevel","school","fieldOfStudy","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jamie/visorplus/frontend/src/components/pages/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"../../App.css\";\nimport \"../Profile.css\";\nimport Card from \"../Card\";\n\nexport default function Profile() {\n  const [bio, setBio] = useState(\"\"); // State to store the bio value\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [interest1, setInterest1] = useState(\"\");\n  const [interest2, setInterest2] = useState(\"\");\n  const [interest3, setInterest3] = useState(\"\");\n\n  useEffect(() => {\n    // Fetch the bio value when the component mounts\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/advisee/bio/\"sup\"');\n        if (!response.ok) {\n          throw new Error(`Failed to fetch bio. Status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setBio(data.bioAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching bio:\", error.message);\n      }\n      try {\n        const response = await fetch(\n          'http://127.0.0.1:5000/advisee/firstname/\"sup\"'\n        );\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch firstname. Status: ${response.status}`\n          );\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setFirstName(data.firstNameAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching firstName:\", error.message);\n      }\n      try {\n        const response = await fetch(\n          'http://127.0.0.1:5000/advisee/lastname/\"sup\"'\n        );\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch lastname. Status: ${response.status}`\n          );\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setLastName(data.lastNameAdvisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching lastName:\", error.message);\n      }\n      try {\n        const response = await fetch(\n          'http://127.0.0.1:5000/advisee/interest1/\"sup\"'\n        );\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch interest1. Status: ${response.status}`\n          );\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest1(data.interest1Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest1:\", error.message);\n      }\n      try {\n        const response = await fetch(\n          'http://127.0.0.1:5000/advisee/interest2/\"sup\"'\n        );\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch interest2. Status: ${response.status}`\n          );\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest2(data.interest2Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest2:\", error.message);\n      }\n      try {\n        const response = await fetch(\n          'http://127.0.0.1:5000/advisee/interest3/\"sup\"'\n        );\n        if (!response.ok) {\n          throw new Error(\n            `Failed to fetch interest3. Status: ${response.status}`\n          );\n        }\n        const data = await response.json();\n\n        // Assuming the JSON structure is as expected\n        setInterest3(data.interest3Advisees[0]);\n      } catch (error) {\n        console.error(\"Error fetching interest3:\", error.message);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const cardData = {\n    type: \"Student\",\n    profilePicture: \"../../../images/profile-icon.jpg\",\n    name: firstName + lastName,\n    researchInterests: \"Machine Learning\",\n    educationLevel: \"Ph.D.\",\n    school: \"McGill Univeristy\",\n    fieldOfStudy: \"Computer Science\",\n    bio: bio,\n  };\n  return (\n    <div className=\"profile\">\n      <h1 className=\"profile\">PROFILE</h1>\n      <Card {...cardData} />\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}